# -*- coding: utf-8 -*-
"""ProyectoPart2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_RgzVfseERDFyFuJbLXS0w2WPw-q-PU

**Proyecto grupo 4**
"""

!pip install spacy
!python -m spacy download es_core_news_sm
!pip install scikit-learn

import spacy
from spacy.lang.es.stop_words import STOP_WORDS
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

nlp = spacy.load('es_core_news_sm')

documentos = [
    "¿Tienen celulares en promoción?",
    "¿Cuánto cuesta un televisor de 50 pulgadas?",
    "¿Venden laptops para estudiantes?",
    "¿Qué marcas de tablets tienen disponibles?",
    "¿Ofrecen garantía en los productos?",
    "¿Tienen audífonos inalámbricos?",
    "¿Puedo pagar con tarjeta de crédito?",
    "¿Hacen entregas a domicilio?",
    "¿Cuánto tiempo tarda la entrega?",
    "¿Venden consolas de videojuegos?",
    "¿Puedo devolver un producto si no funciona?",
    "¿Qué horario tienen de atención?",
    "¿Dónde están ubicados?",
    "¿Venden accesorios para celulares?",
    "¿Tienen impresoras en stock?",
    "¿Hay descuentos por compras al por mayor?",
    "¿Ofrecen financiamiento?",
    "¿Qué marcas de televisores tienen?",
    "¿Venden cargadores originales?",
    "¿Tienen cámaras de seguridad?"]
respuestas = [

    "Sí, tenemos celulares en promoción durante toda la semana.",
    "Un televisor de 50 pulgadas cuesta desde $450 en adelante.",
    "Claro, contamos con laptops ideales para estudiantes con buenos descuentos.",
    "Disponemos de tablets Samsung, Lenovo, Apple y Huawei.",
    "Sí, todos nuestros productos incluyen garantía mínima de 6 meses.",
    "Sí, tenemos varios modelos de audífonos inalámbricos disponibles.",
    "Aceptamos pagos con tarjeta de crédito, débito y transferencias.",
    "Sí, hacemos entregas a domicilio en todo el país.",
    "La entrega toma entre 2 a 5 días hábiles, dependiendo de la zona.",
    "Sí, tenemos consolas como PlayStation, Xbox y Nintendo Switch.",
    "Sí, puedes devolver el producto dentro de los primeros 7 días si está defectuoso.",
    "Nuestro horario es de lunes a sábado de 9:00 a.m. a 7:00 p.m.",
    "Estamos ubicados en el centro comercial El Portal, local 23.",
    "Sí, vendemos fundas, cargadores, protectores de pantalla y más.",
    "Sí, contamos con impresoras multifuncionales y láser en stock.",
    "Sí, ofrecemos descuentos especiales para compras al por mayor.",
    "Tenemos planes de financiamiento de 3, 6 y 12 meses.",
    "Tenemos televisores de marcas LG, Samsung, Sony y TCL.",
    "Sí, vendemos cargadores 100% originales con garantía.",
    "Sí, contamos con kits completos de cámaras de seguridad para casa y negocio."]

def preprocesar_texto(texto):
  tokenizado = nlp(texto.lower())
  tokens = []
  for token in tokenizado:
    if not token.is_stop and not token.is_punct:
      tokens.append(token.lemma_)
  texto_preprocesado = ' '.join(tokens)
  return texto_preprocesado

doc_procesado = [preprocesar_texto(doc) for doc in documentos]

vectorizador = TfidfVectorizer()
tfid_doc = vectorizador.fit_transform(doc_procesado)

def buscar_respuesta(pregunta_usuario):
  pregunta_procesada = preprocesar_texto(pregunta_usuario)
  tfid_pregunta = vectorizador.transform([pregunta_procesada])
  parecido = cosine_similarity(tfid_pregunta,tfid_doc)
  indice_mas_parecido = parecido.argmax()
  mayor_parecido = parecido[0,indice_mas_parecido]
  if mayor_parecido > 0:
    return  respuestas[indice_mas_parecido]
  else:
    return "No hay respuestas para esta pregunta."

def iniciar_chefsitoBot():
   print("Hola soy ChatBot#4, preguntame lo que quieras:")
   while True:

     pregunta_usuario = input("Tu: ").lower()
     if pregunta_usuario in ('adios','chao','nos vemos', 'hasta luego'):
       print("ChatBot#4: Gracias por visitarnos, ten un buen dia!")
       break
     generar_respuesta = buscar_respuesta(pregunta_usuario)
     print(f"ChatBot#4: {generar_respuesta}")

if __name__ == "__main__":
  iniciar_chefsitoBot()